import java.io.IOException;
import java.nio.file.*;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CollectAndDeleteSuccessFiles {

    public static void main(String[] args) {
        Path folderPath = Paths.get("C:/example/folder"); // Change this
        int daysOld = 7;

        // Step 1: Collect matching files
        List<Path> matchingFiles = collectOldSuccessFiles(folderPath, daysOld);

        // Step 2: Delete and get success list
        List<Path> deletedFiles = deleteFiles(matchingFiles);

        System.out.println("\n✅ Successfully deleted files:");
        deletedFiles.forEach(path -> System.out.println(" - " + path.getFileName()));
    }

    // Step 1: Collect files older than N days and ending with "success"
    public static List<Path> collectOldSuccessFiles(Path folderPath, int daysOld) {
        if (!Files.exists(folderPath) || !Files.isDirectory(folderPath)) {
            System.out.println("Invalid folder: " + folderPath.toAbsolutePath());
            return List.of();
        }

        Instant cutoff = Instant.now().minus(daysOld, ChronoUnit.DAYS);

        try (Stream<Path> files = Files.list(folderPath)) {
            return files
                    .filter(Files::isRegularFile)
                    .filter(path -> path.getFileName().toString().endsWith("success"))
                    .filter(path -> isOlderThan(path, cutoff))
                    .collect(Collectors.toList());

        } catch (IOException e) {
            System.out.println("Error reading folder: " + e.getMessage());
            return List.of();
        }
    }

    // Step 2: Delete files and return only those successfully deleted
    public static List<Path> deleteFiles(List<Path> files) {
        List<Path> deleted = new ArrayList<>();
        for (Path path : files) {
            try {
                Files.delete(path);
                deleted.add(path);
            } catch (IOException e) {
                System.out.println("❌ Failed to delete: " + path.getFileName() + " - " + e.getMessage());
            }
        }
        return deleted;
    }

    // Helper: Check if file is older than the cutoff
    private static boolean isOlderThan(Path path, Instant cutoff) {
        try {
            return Files.getLastModifiedTime(path).toInstant().isBefore(cutoff);
        } catch (IOException e) {
            System.out.println("⚠️ Could not read time for: " + path.getFileName());
            return false;
        }
    }
}

List<Path> paths = List.of(Paths.get("/tmp/file1"), Paths.get("/tmp/file2"));
List<String> pathStrings = paths.stream()
                                .map(Path::toString)
                                .collect(Collectors.toList());
List<String> pathStrings = (List<String>) executionContext.get("filePaths");
List<Path> paths = pathStrings.stream()
                              .map(Paths::get)
                              .collect(Collectors.toList());

Instant cutoff = LocalDate.now()
                .minusDays(days)
                .atStartOfDay(ZoneId.systemDefault())
                .toInstant();

// Set up mock file behavior
        Instant cutoff = Instant.now().minus(7, ChronoUnit.DAYS);
        when(mockedFile.getFileName()).thenReturn(Path.of("file_success"));
        when(Files.getLastModifiedTime(mockedFile).toInstant()).thenReturn(cutoff.minus(1, ChronoUnit.DAYS));

        // Assuming folderPath is mocked properly and returns mocked file
        when(Files.list(mockedFolderPath)).thenReturn(Stream.of(mockedFile));

        List<Path> collectedFiles = fileManager.collectOldSuccessFiles(mockedFolderPath, 7);
-------------------
 Path mockPath = mock(Path.class);
        BasicFileAttributes mockAttrs = mock(BasicFileAttributes.class);

        Instant fileInstant = LocalDate.now()
                .atStartOfDay(ZoneId.systemDefault()).toInstant();
        when(mockAttrs.lastModifiedTime()).thenReturn(FileTime.from(fileInstant));

        try (var mocked = mockStatic(Files.class)) {
            mocked.when(() -> Files.readAttributes(mockPath, BasicFileAttributes.class)).thenReturn(mockAttrs);

            FileCleaner cleaner = new FileCleaner();
            LocalDate cutoff = LocalDate.now().minusDays(7);
            assertFalse(cleaner.isOlderThan(mockPath, cutoff));
        }

 Instant tenDaysAgo = LocalDate.now().minusDays(10)
                .atStartOfDay(ZoneId.systemDefault())
                .toInstant();
        Files.setLastModifiedTime(tempFile, FileTime.from(tenDaysAgo));

-----------
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.nio.file.*;
import java.nio.file.attribute.FileTime;
import java.time.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class FileCleanerTest {

    @Test
    void testIsOlderThanNDays_Mocked() throws Exception {
        Path mockPath = mock(Path.class);

        // 10 days ago
        Instant tenDaysAgo = LocalDate.now().minusDays(10)
                .atStartOfDay(ZoneId.systemDefault()).toInstant();
        FileTime fileTime = FileTime.from(tenDaysAgo);

        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            mockedFiles.when(() -> Files.getLastModifiedTime(mockPath)).thenReturn(fileTime);

            boolean result = FileCleaner.isOlderThanNDays(mockPath, 7);
            assertTrue(result, "Expected file to be older than 7 days");
        }
    }
}

---------------
try (MockedStatic<Files> filesMock = mockStatic(Files.class)) {
    filesMock.when(() -> Files.getLastModifiedTime(any(Path.class)))
             .thenReturn(FileTime.from(Instant.now().minus(Duration.ofDays(10))));
             
    // Now when your code calls Files.getLastModifiedTime(path), it returns mocked time.
}

--------------
SSS identified two issues during OCP APIGEE testing:

1. Unable to retrieve all debit cards associated with a pay-to account (when multiple debit cards exist)
On analysis, it was found that an optimistic locking exception occurs while attempting to update the latest binInformation before sending the response.

This issue was introduced as part of the changes made in WKJL-1223.

To confirm the root cause, I temporarily removed the update logic and was able to successfully retrieve all associated debit card records.

Action: This needs to be fixed to properly handle concurrent updates without affecting the result set.

2. Invalid balance shown while adding a SavePayment method
This is a known issue, and an enhancement story has already been created: WKJL-6831.

The issue occurs due to incomplete balance data at the time of saving the payment method.

------------
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;

SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
Date filterDate = sdf.parse("Fri Mar 31 00:00:00 UTC 2028");

// Use as before:
Criteria criteria = Criteria.where("yourDateField").is(filterDate);

-------
// Parse input date string
        String input = "Fri Mar 31 00:00:00 UTC 2028";
        SimpleDateFormat sdf = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        Date targetDate = sdf.parse(input);

        // Ensure milliseconds are 0
        targetDate.setTime(targetDate.getTime() - (targetDate.getTime() % 1000));

        // Build query: where date != targetDate
        Query query = new Query(Criteria.where("yourDateField").ne(targetDate));

        // Define update operation
        Update update = new Update();
        update.set("status", "updated");

        // Execute updateMulti
        UpdateResult result = mongoTemplate.updateMulti(query, update, YourDocument.class);

        System.out.println("Modified documents count: " + result.getModifiedCount());


import java.util.Calendar;
import java.util.Date;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;

// Assume you already have this:
Date filterDate = /* Fri Mar 31 00:00:00 UTC 2028 */;

// Step 1: Compute start and end of the day
Calendar cal = Calendar.getInstance();
cal.setTime(filterDate);
cal.set(Calendar.HOUR_OF_DAY, 0);
cal.set(Calendar.MINUTE, 0);
cal.set(Calendar.SECOND, 0);
cal.set(Calendar.MILLISECOND, 0);
Date startOfDay = cal.getTime();

cal.add(Calendar.DATE, 1);
Date startOfNextDay = cal.getTime();

// Step 2: Query: date < startOfDay OR date >= startOfNextDay
Query query = new Query(new Criteria().orOperator(
    Criteria.where("dateField").lt(startOfDay),
    Criteria.where("dateField").gte(startOfNextDay)
));

// Step 3: Update
Update update = new Update().set("status", "not-matching-day");
mongoTemplate.updateMulti(query, update, YourDocumentClass.class);


---------------
import java.util.Calendar;
import java.util.Date;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

// Assume you have a java.util.Date for the date you want to match
Date filterDate = ...; // e.g., 2028-03-31

// Step 1: Set time to 00:00:00.000
Calendar cal = Calendar.getInstance();
cal.setTime(filterDate);
cal.set(Calendar.HOUR_OF_DAY, 0);
cal.set(Calendar.MINUTE, 0);
cal.set(Calendar.SECOND, 0);
cal.set(Calendar.MILLISECOND, 0);
Date startOfDay = cal.getTime();

// Step 2: Set time to 00:00:00.000 of the NEXT day
cal.add(Calendar.DATE, 1);
Date startOfNextDay = cal.getTime();

// Step 3: Query for range
Query query = new Query(Criteria.where("dateField")
        .gte(startOfDay)
        .lt(startOfNextDay));

-------------------------
Before creating the ticket for Producer Retry, I reviewed the existing ticket I had created for the Orchestra Producer Retry issue and noted the following:

senderMessageId and key are currently not being sent, but they are required to enable retry.

Code changes are needed based on the Orchestra updates. Specifically, we should use KafkaMessage from Kafka (instead of POPS KafkaMessage) to properly set the headers. This will require thorough testing, as it is the main class used to publish messages.

We need to confirm with downstream teams if they are okay with adding these two fields as headers.

Some code comments indicate that ECAR does not support key.

However, I tested by adding both key and senderMessageId, and the retry worked as expected. I’ve attached the supporting documentation for reference.

To move forward with enabling retry from Orchestra, we’ll need both code changes and downstream approval.

While working on one of my development stories, I noticed that debit card reversals were occurring even in 96–94 success cases. I made a small change by adding a condition to ensure reversals are triggered only for failed cases.

Would it be okay to include this change as part of the common changes in the upcoming order PR?

---------
Selective Retry Configuration for Kafka Topics in Orchestra
Is the retry producer mechanism applicable to all topics, or can it be enabled for a specific topic only? For example, we have Topic A and Topic B, and we want to enable retry only for messages in Topic A if any messages fail to publish. Is this possible through Orchestra configuration?


