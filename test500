-------------
The first part (auth response code\\s*[:]?\\s*(\\S+)) captures the Auth Code.

The second part (auth response description\\s*[:]?\\s*(.+)) captures the Auth Description.

The .*? in between allows the text between the code and description to be ignored (it’s non-greedy).
-----------------

import java.util.regex.*;

public class AuthResponseExtractor {
    public static void main(String[] args) {
        String input = "auth Response Code :   05 AND auth response description:  Do not honor";

        // Regex pattern with optional spaces and case-insensitive flag
        Pattern pattern = Pattern.compile(
            "auth response code\\s*[:\\s]*([\\S]+).*?auth response description\\s*[:\\s]*(.*)",
            Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(input);

        if (matcher.find()) {
            String code = matcher.group(1);
            String description = matcher.group(2).trim();
            System.out.println("Code: " + code);
            System.out.println("Description: " + description);
        } else {
            System.out.println("No match found.");
        }
    }
}

----------------

import java.util.regex.*;

public class AuthResponseExtractor {
    public static void main(String[] args) {
        String input = "auth Response Code :   05 AND auth response description:  Do not honor";

        // Improved regex: handles optional colon and spaces more precisely
        Pattern pattern = Pattern.compile(
            "auth response code\\s*[:]?\\s*(\\S+).*?auth response description\\s*[:]?\\s*(.+)",
            Pattern.CASE_INSENSITIVE);
        
        Matcher matcher = pattern.matcher(input);

        if (matcher.find()) {
            String code = matcher.group(1);
            String description = matcher.group(2).trim();
            System.out.println("Code: " + code);
            System.out.println("Description: " + description);
        } else {
            System.out.println("No match found.");
        }
    }
}

-----------------
Step-by-Step Explanation:
Part 1: auth response code\\s*[:]?\\s*(\\S+)
auth response code – literal text (ignores case)

\\s* – match zero or more spaces (before the colon)

[:]? – match an optional colon :

\\s* – match zero or more spaces (after the colon)

(\\S+) – capture the code:

\\S+ means "one or more non-space characters" (e.g., 05, 00, etc.)

Part 2: .*?auth response description\\s*[:]?\\s*(.+)
.*? – match anything between the code and the description (non-greedy)

auth response description – literal text (ignores case)

\\s*[:]?\\s* – same logic as above, allows optional colon and spaces

(.+) – capture the description:

.+ means "one or more of any characters" — this gets the full message like Do not honor

------------------
import java.util.regex.*;

public class AuthResponseExtractor {
    public static void main(String[] args) {
        String input = "auth Response Code :   05 AND auth response description:  Do not honor";

        // Pattern for Auth Code
        Pattern codePattern = Pattern.compile(
            "auth response code\\s*[:]?\\s*(\\S+)",
            Pattern.CASE_INSENSITIVE);
        Matcher codeMatcher = codePattern.matcher(input);

        // Pattern for Auth Description
        Pattern descPattern = Pattern.compile(
            "auth response description\\s*[:]?\\s*(.+)",
            Pattern.CASE_INSENSITIVE);
        Matcher descMatcher = descPattern.matcher(input);

        // Extract if present
        if (codeMatcher.find()) {
            System.out.println("Code: " + codeMatcher.group(1));
        } else {
            System.out.println("Code not found.");
        }

        if (descMatcher.find()) {
            System.out.println("Description: " + descMatcher.group(1).trim());
        } else {
            System.out.println("Description not found.");
        }
    }
}
Explanation
"auth response code\\s*[:]?\\s*(\\S+)"

auth response code	Matches the literal text (case-insensitive)
\\s*	Matches zero or more spaces after the text
[:]?	Matches an optional colon :
\\s*	Matches zero or more spaces after the colon
(\\S+)	Captures one or more non-space characters (this is the code, like 05)


"auth response description\\s*[:]?\\s*(.+)"

auth response description	Matches the literal text (case-insensitive)
\\s*	Matches zero or more spaces after the text
[:]?	Matches an optional colon :
\\s*	Matches zero or more spaces after the colon
(.+)	Captures one or more of any character — this is the description
---
import java.util.regex.*;

public class AuthResponseExtractor {
    public static void main(String[] args) {
        String input = "auth Response Code :   05 AND auth response description:  Do not honor and errorcode:67";

        // Regex for Auth Response Code
        Pattern codePattern = Pattern.compile(
            "auth response code\\s*[:]?\\s*(\\S+)",
            Pattern.CASE_INSENSITIVE);
        Matcher codeMatcher = codePattern.matcher(input);

        // Regex for Auth Response Description
        Pattern descPattern = Pattern.compile(
            "auth response description\\s*[:]?\\s*(.+)",
            Pattern.CASE_INSENSITIVE);
        Matcher descMatcher = descPattern.matcher(input);

        // Regex for Error Code
        Pattern errorCodePattern = Pattern.compile(
            "errorcode\\s*[:]?\\s*(\\S+)",
            Pattern.CASE_INSENSITIVE);
        Matcher errorCodeMatcher = errorCodePattern.matcher(input);

        // Extract each only if matched
        if (codeMatcher.find()) {
            System.out.println("Code: " + codeMatcher.group(1));
        } else {
            System.out.println("Code: not found");
        }

        if (descMatcher.find()) {
            System.out.println("Description: " + descMatcher.group(1).trim());
        } else {
            System.out.println("Description: not found");
        }

        if (errorCodeMatcher.find()) {
            System.out.println("ErrorCode: " + errorCodeMatcher.group(1));
        } else {
            System.out.println("ErrorCode: not found");
        }
    }
}

