package com.example.scheduler;

import net.javacrumbs.shedlock.spring.annotation.SchedulerLock;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class SampleJobService {

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job sampleBatchJob;

    @SchedulerLock(name = "SampleJob_scheduledTask", lockAtMostFor = "10m", lockAtLeastFor = "1m")
    public void executeJob() {
        try {
            jobLauncher.run(sampleBatchJob, new JobParametersBuilder()
                .addLong("time", System.currentTimeMillis())
                .toJobParameters());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

-------------- Junit test case
// QuartzConfigTest.java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.quartz.JobDetail;
import org.quartz.Trigger;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class QuartzConfigTest {

    @Mock
    private JobFactory jobFactory;

    @Mock
    private JobDetail jobDetail;

    @Mock
    private Trigger trigger;

    @InjectMocks
    private QuartzConfig quartzConfig;

    @BeforeEach
    public void setUp() {
        when(jobDetail.getKey()).thenReturn(JobKey.jobKey("myJob"));
        when(trigger.getKey()).thenReturn(TriggerKey.triggerKey("myTrigger"));
    }

    @Test
    public void testSchedulerFactoryBean() {
        SchedulerFactoryBean schedulerFactoryBean = quartzConfig.schedulerFactoryBean(trigger, jobDetail);
        assertNotNull(schedulerFactoryBean);
        assertNotNull(schedulerFactoryBean.getObject());
        assertNotNull(schedulerFactoryBean.getJobFactory());
        assertEquals(jobFactory, schedulerFactoryBean.getJobFactory());
        assertArrayEquals(new JobDetail[]{jobDetail}, schedulerFactoryBean.getJobDetails());
        assertArrayEquals(new Trigger[]{trigger}, schedulerFactoryBean.getTriggers());
    }

    @Test
    public void testJobDetail() {
        JobDetail jobDetail = quartzConfig.jobDetail();
        assertNotNull(jobDetail);
        assertEquals("myJob", jobDetail.getKey().getName());
    }

    @Test
    public void testTrigger() {
        Trigger trigger = quartzConfig.trigger(jobDetail);
        assertNotNull(trigger);
        assertEquals("myTrigger", trigger.getKey().getName());
        assertEquals(jobDetail, trigger.getJobKey());
    }
}


    @Query("{ 'email': { $ne: null }, 'status': 'active' }")
  @Query("{ 'contacts': { $elemMatch: { 'phoneNumber': null } } }")
