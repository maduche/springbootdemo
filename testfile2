import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

public class HelloWorldTaskletTest {

    @InjectMocks
    private HelloWorldTasklet tasklet;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testTasklet() throws Exception {
        StepContribution stepContribution = mock(StepContribution.class);
        ChunkContext chunkContext = mock(ChunkContext.class);

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, status);
    }
}

-------------------------------------------------------------------------
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.NoSuchJobException;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobRestartException;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.repository.support.SimpleJobRepository;
import org.springframework.batch.core.configuration.JobLocator;

public class MyQuartzJobTest {

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private JobLocator jobLocator;

    @Mock
    private Job job;

    @Mock
    private JobExecutionContext jobExecutionContext;

    @InjectMocks
    private MyQuartzJob myQuartzJob;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testExecuteInternal() throws Exception {
        // Arrange
        when(jobLocator.getJob("myJob")).thenReturn(job);
        JobParameters jobParameters = new JobParametersBuilder().toJobParameters();
        when(jobLauncher.run(job, jobParameters)).thenReturn(null);

        // Act
        myQuartzJob.executeInternal(jobExecutionContext);

        // Assert
        verify(jobLocator, times(1)).getJob("myJob");
        verify(jobLauncher, times(1)).run(job, jobParameters);
    }

    @Test
    public void testExecuteInternalJobLocatorThrowsException() throws Exception {
        // Arrange
        when(jobLocator.getJob("myJob")).thenThrow(new NoSuchJobException("Job not found"));

        // Act & Assert
        assertThrows(JobExecutionException.class, () -> {
            myQuartzJob.executeInternal(jobExecutionContext);
        });

        verify(jobLocator, times(1)).getJob("myJob");
        verify(jobLauncher, times(0)).run(any(Job.class), any(JobParameters.class));
    }

 @Bean
    public ListItemReader<InputType> reader() {
        List<InputType> items = Arrays.asList(
                new InputType("value1", "value2"),
                new InputType("value3", "value4"),
                new InputType("value5", "value6")
        );
        return new ListItemReader<>(items);
    }

}

