import javax.sql.DataSource;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;

   @Autowired
    private MyTasklet myTasklet; // Inject the tasklet

    @Bean
    public Step myStep() {
        return new StepBuilder("myStep") // Step name
                .tasklet(myTasklet) // Reference the tasklet
                .build(); // Build the Step
    }

@Configuration
@EnableBatchProcessing
public class BatchConfiguration extends DefaultBatchConfigurer {

    @Override
    public void setDataSource(DataSource dataSource) {
        // Do nothing or leave it empty to disable Spring Batch's auto-configuration of datasource
    }

    @Override
    protected DataSource createDataSource() {
        // Return an in-memory H2 datasource
        return new EmbeddedDatabaseBuilder()
                .setType(EmbeddedDatabaseType.H2)
                .build();
    }

    // Other batch-related beans can be configured here, such as jobBuilderFactory, stepBuilderFactory, etc.
    @Bean
    public JobBuilderFactory jobBuilderFactory() {
        return new JobBuilderFactory(jobRepository());
    }

    @Bean
    public StepBuilderFactory stepBuilderFactory() {
        return new StepBuilderFactory(jobRepository(), transactionManager());
    }
}

