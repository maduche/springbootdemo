import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class YourService {
    @Autowired
    private MongoTemplate mongoTemplate;

    public List<YourDocument> findDocumentsWithCondition() {
        // Aggregation pipeline to include additional field conditions
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("datefield2")
                        .plus(1000 * 60 * 60 * 24 * 10) // Adding 10 days in milliseconds
                        .as("datefield2Plus10Days"),
                Aggregation.match(
                        Criteria.where("datefield1").gte("$datefield2Plus10Days")
                                .and("anotherField").is("someValue")
                )
        );

        // Execute the aggregation pipeline
        List<YourDocument> result = mongoTemplate.aggregate(aggregation, YourDocument.class).getMappedResults();

        return result;
    }
}


-------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Service
public class YourService {
    @Autowired
    private MongoTemplate mongoTemplate;

    public List<YourDocument> findDocumentsWithCondition() {
        // Get the current date
        Calendar cal = Calendar.getInstance();
        Date currentDate = cal.getTime();

        // Add 10 days to datefield2 to get datefield2Plus10Days
        cal.add(Calendar.DATE, 10);
        Date datefield2Plus10Days = cal.getTime();

        // Aggregation pipeline to include additional field conditions
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("datefield2")
                        .plus(1000 * 60 * 60 * 24 * 10) // Adding 10 days in milliseconds
                        .as("datefield2Plus10Days"),
                Aggregation.match(
                        Criteria.where("datefield1").gte(datefield2Plus10Days)
                                .and("anotherField").is("someValue")
                )
        );

        // Execute the aggregation pipeline
        List<YourDocument> result = mongoTemplate.aggregate(aggregation, YourDocument.class).getMappedResults();

        return result;
    }
}


-----------------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.List;

@Service
public class YourService {
    @Autowired
    private MongoTemplate mongoTemplate;

    public List<YourDocument> findDocumentsWithCondition() {
        // Get the current date
        Date currentDate = new Date();

        // Aggregation pipeline to include additional field conditions
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("datefield2")
                        .plus(1000 * 60 * 60 * 24 * 10) // Adding 10 days in milliseconds
                        .as("datefield2Plus10Days"),
                Aggregation.match(
                        Criteria.where("datefield1").gte("$datefield2Plus10Days")
                                .and("anotherField").is("someValue")
                )
        );

        // Execute the aggregation pipeline
        List<YourDocument> result = mongoTemplate.aggregate(aggregation, YourDocument.class).getMappedResults();

        return result;
    }
}

----------------
   AggregationOperation addDays = Aggregation.project()
                .andExpression("dateField2").plus(numberOfDays * 24 * 60 * 60 * 1000).as("dateField2PlusDays");

        AggregationOperation compareDates = Aggregation.match(
                Criteria.where("dateField1").gt("dateField2PlusDays")
                        .and(otherField).is(otherValue)
        );

        Aggregation aggregation = Aggregation.newAggregation(
                addDays,
                compareDates
        );

-----------------------------
   public List<YourEntity> compareFieldsWithOffset() {
        Criteria criteria = Criteria.where("dateField1").gte("dateField2 + 1000 * 60 * 60 * 24 * 11"); // Using the $gte operator

        Query query = new Query(criteria);

        return mongoTemplate.find(query, YourEntity.class);
    }

-------------------
   Criteria criteria = new Criteria().andOperator(
                Criteria.where("field1").is("pending"),
                Criteria.where("dateField1").gte("dateField2 + 1000 * 60 * 60 * 24 * 11"),
                Criteria.where("dateField1").lte(currentDateMinus5Days)
        );

-------------------------------------------

import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.Fields;
import org.springframework.data.mongodb.core.aggregation.TypedAggregation;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;

// Assuming you have a MongoTemplate instance named mongoTemplate

// Calculate the date 10 days in the future
LocalDate tenDaysInFuture = LocalDate.now().plusDays(10);
Date tenDaysInFutureDate = Date.from(tenDaysInFuture.atStartOfDay(ZoneId.systemDefault()).toInstant());

// Define the aggregation operation to project dateField2 plus 10 days
AggregationOperation projectOperation = Aggregation.project()
    .andExpression("dateField2").plus(tenDaysInFutureDate.getTime()).as("dateField2Plus10Days");

// Define the match operation to filter documents where dateField1 is greater than or equal to dateField2 plus 10 days
AggregationOperation matchOperation = Aggregation.match(Criteria.where("dateField1").gteExpression("dateField2Plus10Days"));

// Define the aggregation pipeline
TypedAggregation<YourDocumentType> aggregation = Aggregation.newAggregation(
    projectOperation,
    matchOperation
);

// Execute the aggregation
List<YourResultType> result = mongoTemplate.aggregate(aggregation, YourResultType.class).getMappedResults();

