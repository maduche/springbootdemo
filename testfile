import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class YourService {
    @Autowired
    private MongoTemplate mongoTemplate;

    public List<YourDocument> findDocumentsWithCondition() {
        // Aggregation pipeline to include additional field conditions
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("datefield2")
                        .plus(1000 * 60 * 60 * 24 * 10) // Adding 10 days in milliseconds
                        .as("datefield2Plus10Days"),
                Aggregation.match(
                        Criteria.where("datefield1").gte("$datefield2Plus10Days")
                                .and("anotherField").is("someValue")
                )
        );

        // Execute the aggregation pipeline
        List<YourDocument> result = mongoTemplate.aggregate(aggregation, YourDocument.class).getMappedResults();

        return result;
    }
}


-------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Service
public class YourService {
    @Autowired
    private MongoTemplate mongoTemplate;

    public List<YourDocument> findDocumentsWithCondition() {
        // Get the current date
        Calendar cal = Calendar.getInstance();
        Date currentDate = cal.getTime();

        // Add 10 days to datefield2 to get datefield2Plus10Days
        cal.add(Calendar.DATE, 10);
        Date datefield2Plus10Days = cal.getTime();

        // Aggregation pipeline to include additional field conditions
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("datefield2")
                        .plus(1000 * 60 * 60 * 24 * 10) // Adding 10 days in milliseconds
                        .as("datefield2Plus10Days"),
                Aggregation.match(
                        Criteria.where("datefield1").gte(datefield2Plus10Days)
                                .and("anotherField").is("someValue")
                )
        );

        // Execute the aggregation pipeline
        List<YourDocument> result = mongoTemplate.aggregate(aggregation, YourDocument.class).getMappedResults();

        return result;
    }
}


-----------------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.List;

@Service
public class YourService {
    @Autowired
    private MongoTemplate mongoTemplate;

    public List<YourDocument> findDocumentsWithCondition() {
        // Get the current date
        Date currentDate = new Date();

        // Aggregation pipeline to include additional field conditions
        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("datefield2")
                        .plus(1000 * 60 * 60 * 24 * 10) // Adding 10 days in milliseconds
                        .as("datefield2Plus10Days"),
                Aggregation.match(
                        Criteria.where("datefield1").gte("$datefield2Plus10Days")
                                .and("anotherField").is("someValue")
                )
        );

        // Execute the aggregation pipeline
        List<YourDocument> result = mongoTemplate.aggregate(aggregation, YourDocument.class).getMappedResults();

        return result;
    }
}

----------------
   AggregationOperation addDays = Aggregation.project()
                .andExpression("dateField2").plus(numberOfDays * 24 * 60 * 60 * 1000).as("dateField2PlusDays");

        AggregationOperation compareDates = Aggregation.match(
                Criteria.where("dateField1").gt("dateField2PlusDays")
                        .and(otherField).is(otherValue)
        );

        Aggregation aggregation = Aggregation.newAggregation(
                addDays,
                compareDates
        );

-----------------------------
   public List<YourEntity> compareFieldsWithOffset() {
        Criteria criteria = Criteria.where("dateField1").gte("dateField2 + 1000 * 60 * 60 * 24 * 11"); // Using the $gte operator

        Query query = new Query(criteria);

        return mongoTemplate.find(query, YourEntity.class);
    }

-------------------
   Criteria criteria = new Criteria().andOperator(
                Criteria.where("field1").is("pending"),
                Criteria.where("dateField1").gte("dateField2 + 1000 * 60 * 60 * 24 * 11"),
                Criteria.where("dateField1").lte(currentDateMinus5Days)
        );

-------------------------------------------

import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.Fields;
import org.springframework.data.mongodb.core.aggregation.TypedAggregation;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.Date;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;

// Assuming you have a MongoTemplate instance named mongoTemplate

// Calculate the date 10 days in the future
LocalDate tenDaysInFuture = LocalDate.now().plusDays(10);
Date tenDaysInFutureDate = Date.from(tenDaysInFuture.atStartOfDay(ZoneId.systemDefault()).toInstant());

// Define the aggregation operation to project dateField2 plus 10 days
AggregationOperation projectOperation = Aggregation.project()
    .andExpression("dateField2").plus(tenDaysInFutureDate.getTime()).as("dateField2Plus10Days");

// Define the match operation to filter documents where dateField1 is greater than or equal to dateField2 plus 10 days
AggregationOperation matchOperation = Aggregation.match(Criteria.where("dateField1").gteExpression("dateField2Plus10Days"));

// Define the aggregation pipeline
TypedAggregation<YourDocumentType> aggregation = Aggregation.newAggregation(
    projectOperation,
    matchOperation
);

// Execute the aggregation
List<YourResultType> result = mongoTemplate.aggregate(aggregation, YourResultType.class).getMappedResults();


----------------------------
@Aggregation("{ $project: { dateField1: 1, dateField2: 1, isDateField1GreaterThanDateField2Plus10: { $gt: ['$dateField1', { $add: ['$dateField2', 1000 * 60 * 60 * 24 * 10] }] } } }")
    List<ComparisonResult> compareDateField1ToDateField2Plus10();



---------------------
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Projections;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;

import java.util.Arrays;
import java.util.List;

@Repository
public class YourRepository {

    @Autowired
    private MongoTemplate mongoTemplate;

    public List<Document> compareFields(String field1, String field2) {
        return mongoTemplate.aggregate(Arrays.asList(
            Aggregates.project(
                Projections.fields(
                    Projections.include(field1, field2)
                )
            ),
            Aggregates.match(Filters.and(
                Filters.exists(field1),
                Filters.exists(field2)
            )),
            Aggregates.addFields(new Document(field2 + "_plus_10_days",
                new Document("$add", Arrays.asList("$" + field2, 1000 * 60 * 60 * 24 * 10))
            )),
            Aggregates.addFields(new Document("comparisonResult",
                new Document("$gte", Arrays.asList("$" + field1, "$" + field2 + "_plus_10_days"))
            ))
        ), "your_collection_name", Document.class).getMappedResults();
    }
}

-------------------
@Aggregation([
        {
            $project: {
                dateField1: 1,
                dateField2: 1,
                otherField1: 1,
                otherField2: 1,
                dateField2Plus10Days: { $add: ['$dateField2', 1000 * 60 * 60 * 24 * 10] }
            }
        },
        {
            $project: {
                dateField1: 1,
                dateField2Plus10Days: 1,
                otherField1: 1,
                otherField2: 1,
                isDateField1GreaterThanDateField2Plus10: {
                    $cond: {
                        if: { $gt: ['$dateField1', '$dateField2Plus10Days'] },
                        then: true,
                        else: false
                    }
                },
                isOtherField1EqualToSomeValue: {
                    $eq: ['$otherField1', 'someValue'] // Example condition based on otherField1
                }
            }
        }
    ])
    List<ComparisonResult> performDateComparison();


--------------------

import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import org.bson.Document;
import java.util.ArrayList;
import java.util.List;
import static com.mongodb.client.model.Aggregates.*;
import static com.mongodb.client.model.Filters.*;

public class MongoExample {

    public static void main(String[] args) {
        try (MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017")) {
            MongoCollection<Document> collection = mongoClient.getDatabase("your_database").getCollection("your_collection");

            // Construct the aggregation pipeline with $match stage for filtering
            List<Document> pipeline = new ArrayList<>();
            pipeline.add(Aggregates.match(
                and(
                    gte("datefield1", "$datefield2"), // condition: datefield1 >= datefield2
                    eq("other_field", "some_value")  // additional condition on another field
                )
            ));

            // Execute the aggregation query
            MongoCursor<Document> cursor = collection.aggregate(pipeline).iterator();

            // Iterate through the results
            while (cursor.hasNext()) {
                Document document = cursor.next();
                System.out.println(document.toJson());
            }
        }
    }
}

---------------

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import java.util.Date;

public interface YourRepository extends MongoRepository<YourEntity, String> {

    @Query("{'field1': { $gte: '$field2' } }")
    List<YourEntity> findByDateField1GreaterThanOrEqualField2();

    // Add more query methods as needed...

}
@Query("{$match: {$expr: {$eq: ['$field1', '$field2']}}}")

@Query("{$match: {$expr: {$eq: ['$field1', '$field2']}}}")

--------------------------------------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1EqualsField2() {
        // Use MongoTemplate to perform the comparison
        List<YourEntity> result = mongoTemplate.find(
            Query.query(Criteria.where("field1").is("field2")),
            YourEntity.class
        );
        return result;
    }
}


----
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1EqualsField2() {
        List<YourEntity> result = mongoTemplate.find(
            Query.query(Criteria.where("$expr").is(
                new Document("$eq", Arrays.asList("$field1", "$field2"))
            )),
            YourEntity.class
        );
        return result;
    }
}

-------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1EqualsField2Plus10Days() {
        // Construct a query to add 10 days to field2
        Query query = new Query();
        query.addCriteria(Criteria.where("field1").is("field2")
            .and("field2").is(
                new Document("$add", Arrays.asList(
                    new Document("$dateFromString", new Document("dateString", "$field2")),
                    ChronoUnit.DAYS.getDuration().multipliedBy(10)
                ))
            )
        );
        
        // Execute the query
        List<YourEntity> result = mongoTemplate.find(query, YourEntity.class);
        return result;
    }
}


-------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanField2Plus10Days() {
        // Calculate the date 10 days from now
        Instant tenDaysFromNow = Instant.now().plus(10, ChronoUnit.DAYS);
        
        // Create the aggregation pipeline to add 10 days to field2 and compare it with field1
        Aggregation aggregation = Aggregation.newAggregation(
            Aggregation.project()
                .andExpression("field2").dateFromString("%Y-%m-%d").as("field2Date")
                .andExpression("$$NOW").as("now")
                .andExpression("$$now + 864000000").as("tenDaysFromNow"), // 864000000 milliseconds = 10 days
            Aggregation.match(
                Criteria.where("field1").gt("field2Date").and("field2Date").lte("tenDaysFromNow")
            )
        );

        // Execute the aggregation
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

-------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.bson.Document; // Import Document class
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1EqualsField2() {
        // Construct the query using Document
        Document queryDocument = new Document("field1", "field2");
        Query query = new BasicQuery(queryDocument);
        
        // Execute the query
        List<YourEntity> result = mongoTemplate.find(query, YourEntity.class);
        return result;
    }
}

------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.Instant;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operations
        AggregationOperation addTenDays = Aggregation.addFields().addFieldWithValue("field2Plus10Days",
                Aggregation.dateFromParts()
                        .year("$field2.year")
                        .month("$field2.month")
                        .dayOfMonth("$field2.dayOfMonth")
                        .hour("$field2.hour")
                        .minute("$field2.minute")
                        .second("$field2.second")
                        .millisecond("$field2.millisecond")
                        .add(10).to("day"));

        // Define the aggregation query
        AggregationOperation matchCondition = Aggregation.match(
                Criteria.where("field1").gte("$field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}


----------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.aggregation.DateOperators;
import org.springframework.data.mongodb.core.aggregation.DateOperators.*;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days",
                        Add.valueOf(DateOperators.dateFromParts()
                                .yearOf("field2")
                                .monthOf("field2")
                                .dayOfMonth("field2")
                                .hourOf("field2")
                                .minuteOf("field2")
                                .secondOf("field2")
                                .millisecondOf("field2")
                                .toMilliseconds(), 10 * 24 * 60 * 60 * 1000)); // 10 days in milliseconds

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}
------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        Aggregation.add(DateOperators.valueOf("field2").toMillis(), 10 * 24 * 60 * 60 * 1000));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}
------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        Aggregation.valueOf("$$NOW").plus(10 * 24 * 60 * 60 * 1000));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}
------------------------------------------------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        Aggregation.add("field2", 10 * 24 * 60 * 60 * 1000)); // Adding milliseconds for 10 days

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        AggregationFunctionExpressions.Add.dateOf("$field2").plus(10 * 24 * 60 * 60 * 1000));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

----------------------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.aggregation.DateOperators;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        DateOperators.DateFromString.fromString(DateOperators.DateToString.dateOf("field2"))
                                .plus(10 * 24 * 60 * 60 * 1000));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

-----
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        AggregationFunctionExpressions.Add.valueOf("$$field2", 10 * 24 * 60 * 60 * 1000));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

----------------------------------------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        new Document("$add", Arrays.asList("$$field2", 10 * 24 * 60 * 60 * 1000)));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

--------------------

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        new Document("$add", Arrays.asList("$$field2", 10 * 24 * 60 * 60 * 1000)));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

-------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        new Document("$add", Arrays.asList("$$field2", 10 * 24 * 60 * 60 * 1000)));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

--------------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.addFields()
                .addFieldWithValue("field2Plus10Days", 
                        new Document("$add", Arrays.asList("$$field2", 10 * 24 * 60 * 60 * 1000)));

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}
------------------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByField1GreaterThanOrEqualField2Plus10Days() {
        // Define the aggregation operation to add 10 days to field2
        AggregationOperation addTenDays = Aggregation.project()
            .andExpression("{$add: [\"$field2\", 10 * 24 * 60 * 60 * 1000]}").as("field2Plus10Days");

        // Define the aggregation operation to match documents where field1 >= field2Plus10Days
        AggregationOperation matchCondition = Aggregation.match(Criteria.where("field1").gte("field2Plus10Days"));

        // Execute the aggregation
        Aggregation aggregation = Aggregation.newAggregation(addTenDays, matchCondition);
        List<YourEntity> result = mongoTemplate.aggregate(aggregation, YourEntity.class).getMappedResults();
        return result;
    }
}

-------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepository {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByDatefieldMinus10Days() {
        Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
        Date tenDaysAgoDate = Date.from(tenDaysAgo);

        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("{$subtract: ['$datefield', ?0]}", tenDaysAgoDate)
                        .as("datefieldMinus10Days"),
                Aggregation.match(Criteria.where("datefieldMinus10Days").lte(new Date()))
        );

        AggregationResults<YourEntity> results = mongoTemplate.aggregate(aggregation, YourEntity.class);
        return results.getMappedResults();
    }
}

----------------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepositoryCustom {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByDatefieldMinus10Days() {
        Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
        Date tenDaysAgoDate = Date.from(tenDaysAgo);

        Aggregation aggregation = Aggregation.newAggregation(
                Aggregation.project()
                        .andExpression("{'$subtract': ['$datefield', ?0]}", tenDaysAgoDate)
                        .as("datefieldMinus10Days"),
                Aggregation.match(Criteria.where("datefieldMinus10Days").lte(new Date()))
        );

        AggregationResults<YourEntity> results = mongoTemplate.aggregate(aggregation, YourEntity.class);
        return results.getMappedResults();
    }
}

------------------------
Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
Date tenDaysAgoDate = Date.from(tenDaysAgo);

Aggregation aggregation = Aggregation.newAggregation(
    Aggregation.project()
            .and("datefield").minus(tenDaysAgoDate).as("datefieldMinus10Days"),
    Aggregation.match(Criteria.where("datefieldMinus10Days").lte(new Date()))
);
--------------------------import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepositoryCustom {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByFieldConditions() {
        Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
        Date tenDaysAgoDate = Date.from(tenDaysAgo);

        Aggregation aggregation = Aggregation.newAggregation(
            Aggregation.addFields()
                .addField("field2Plus10Days").withValueOf("{$add: ['$field2', 10 * 24 * 60 * 60 * 1000]}")
                .addField("field1Minus10Days").withValueOf("{$subtract: ['$field1', 10 * 24 * 60 * 60 * 1000]}"),
            Aggregation.match(Criteria.where("field1").gte("field2Plus10Days")),
            Aggregation.match(Criteria.where("field1").lte("field1Minus10Days"))
        );

        AggregationResults<YourEntity> results = mongoTemplate.aggregate(aggregation, YourEntity.class);
        return results.getMappedResults();
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepositoryCustom {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByFieldConditions() {
        Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
        Date tenDaysAgoDate = Date.from(tenDaysAgo);

        Aggregation aggregation = Aggregation.newAggregation(
            Aggregation.project()
                .andExpression("field2 + 10 * 24 * 60 * 60 * 1000").as("field2Plus10Days")
                .andExpression("field1 - 10 * 24 * 60 * 60 * 1000").as("field1Minus10Days"),
            Aggregation.match(Criteria.where("field1").gte("field2Plus10Days").and("field1").lte("field1Minus10Days"))
        );

        AggregationResults<YourEntity> results = mongoTemplate.aggregate(aggregation, YourEntity.class);
        return results.getMappedResults();
    }
}


--------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepositoryCustom {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByFieldConditions() {
        Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
        Date tenDaysAgoDate = Date.from(tenDaysAgo);

        Aggregation aggregation = Aggregation.newAggregation(
            Aggregation.project()
                .andExpression("{'$add': ['$field2', 10 * 24 * 60 * 60 * 1000]}").as("field2Plus10Days")
                .andExpression("{'$subtract': ['$field1', 10 * 24 * 60 * 60 * 1000]}").as("field1Minus10Days"),
            Aggregation.match(Criteria.where("field1").gte("field2Plus10Days").and("field1").lte("field1Minus10Days"))
        );

        AggregationResults<YourEntity> results = mongoTemplate.aggregate(aggregation, YourEntity.class);
        return results.getMappedResults();
    }
}

-----------------------------
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.query.Criteria;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;

@Repository
public class YourRepositoryImpl implements YourRepositoryCustom {

    private final MongoTemplate mongoTemplate;

    @Autowired
    public YourRepositoryImpl(MongoTemplate mongoTemplate) {
        this.mongoTemplate = mongoTemplate;
    }

    @Override
    public List<YourEntity> findByFieldConditions() {
        Instant tenDaysAgo = Instant.now().minus(10, ChronoUnit.DAYS);
        Date tenDaysAgoDate = Date.from(tenDaysAgo);

        Aggregation aggregation = Aggregation.newAggregation(
            Aggregation.project()
                .andExpression("{'$add': ['$field2', 864000000]}").as("field2Plus10Days")
                .andExpression("{'$subtract': ['$field1', 864000000]}").as("field1Minus10Days"),
            Aggregation.match(Criteria.where("field1").gte("field2Plus10Days").and("field1").lte("field1Minus10Days"))
        );

        AggregationResults<YourEntity> results = mongoTemplate.aggregate(aggregation, YourEntity.class);
        return results.getMappedResults();
    }
}



